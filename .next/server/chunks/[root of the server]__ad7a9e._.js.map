{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Sesesp/Desktop/nextjs-prisma-crud/src/lib/prisma.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\r\n\r\nexport const prisma = new PrismaClient()"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY"}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/Sesesp/Desktop/nextjs-prisma-crud/src/app/api/task/route.js"],"sourcesContent":["import {prisma} from '@/lib/prisma'\r\nimport { NextResponse } from \"next/server\"\r\n\r\nexport async function GET(){\r\n    try {\r\n        const task = await prisma.task.findMany()\r\n        return NextResponse.json(task)\r\n    } catch (error) {\r\n        console.log(error.message)\r\n    }\r\n}\r\nexport async function POST(request){\r\n    try {\r\n        const {title, description} = await request.json()\r\n        const newTask = await prisma.task.create({\r\n            data: {\r\n                title,\r\n                description\r\n            }\r\n        })\r\n        return NextResponse.json(newTask)\r\n    } catch (error) {\r\n        console.log(error.message)\r\n    }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;;;AAEO,eAAe;IAClB,IAAI;QACA,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,MAAM,OAAO;IAC7B;AACJ;AACO,eAAe,KAAK,OAAO;IAC9B,IAAI;QACA,MAAM,EAAC,KAAK,EAAE,WAAW,EAAC,GAAG,MAAM,QAAQ,IAAI;QAC/C,MAAM,UAAU,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACrC,MAAM;gBACF;gBACA;YACJ;QACJ;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,MAAM,OAAO;IAC7B;AACJ"}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}