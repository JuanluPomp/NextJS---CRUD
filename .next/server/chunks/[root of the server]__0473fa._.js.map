{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 63, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/juan.lizarraga/Documents/projects/nextjs/NextJS---CRUD/src/lib/prisma.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\r\n\r\nexport const prisma = new PrismaClient()"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY"}},
    {"offset": {"line": 69, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 75, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/juan.lizarraga/Documents/projects/nextjs/NextJS---CRUD/src/app/api/task/%5Bid%5D/route.js"],"sourcesContent":["import { NextResponse } from \"next/server\"\r\nimport { prisma } from \"@/lib/prisma\"\r\n\r\nexport async function GET(request, {params}){\r\n    try {\r\n        const {id} = await params\r\n        const task = await prisma.task.findUnique({\r\n            where: {\r\n                id: Number(id)\r\n            }\r\n        })\r\n        return NextResponse.json(task)\r\n    } catch (error) {\r\n        return NextResponse.json({ error: \"Internal Server Error\" }, { status: 500 });\r\n    }\r\n}\r\n\r\nexport async function PUT(request, {params}){\r\n    try {\r\n        const data = await request.json()\r\n        const {id} = await params\r\n        const task = await prisma.task.update({\r\n        where:{\r\n            id: Number(id)\r\n        },\r\n        data: data\r\n        })\r\n        return NextResponse.json(task)\r\n    } catch (error) {\r\n        return NextResponse.json({ error: error.message }, { status: 500 });\r\n    }\r\n}\r\n\r\nexport async function DELETE(request, {params}){\r\n    try {\r\n        const {id} = await params\r\n        await prisma.task.delete({where:{\r\n            id: Number(id)\r\n        }})\r\n        return NextResponse.json(`Tarea ${id} eliminada`)\r\n    } catch (error) {\r\n        return NextResponse.json({ error: error.message }, { status: 500 });\r\n    }\r\n}"],"names":[],"mappings":";;;;;AAAA;AACA;;;AAEO,eAAe,IAAI,OAAO,EAAE,EAAC,MAAM,EAAC;IACvC,IAAI;QACA,MAAM,EAAC,EAAE,EAAC,GAAG,MAAM;QACnB,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,UAAU,CAAC;YACtC,OAAO;gBACH,IAAI,OAAO;YACf;QACJ;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO;QAAwB,GAAG;YAAE,QAAQ;QAAI;IAC/E;AACJ;AAEO,eAAe,IAAI,OAAO,EAAE,EAAC,MAAM,EAAC;IACvC,IAAI;QACA,MAAM,OAAO,MAAM,QAAQ,IAAI;QAC/B,MAAM,EAAC,EAAE,EAAC,GAAG,MAAM;QACnB,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACtC,OAAM;gBACF,IAAI,OAAO;YACf;YACA,MAAM;QACN;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrE;AACJ;AAEO,eAAe,OAAO,OAAO,EAAE,EAAC,MAAM,EAAC;IAC1C,IAAI;QACA,MAAM,EAAC,EAAE,EAAC,GAAG,MAAM;QACnB,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YAAC,OAAM;gBAC5B,IAAI,OAAO;YACf;QAAC;QACD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC,CAAC,MAAM,EAAE,GAAG,UAAU,CAAC;IACpD,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAE,OAAO,MAAM,OAAO;QAAC,GAAG;YAAE,QAAQ;QAAI;IACrE;AACJ"}},
    {"offset": {"line": 137, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}