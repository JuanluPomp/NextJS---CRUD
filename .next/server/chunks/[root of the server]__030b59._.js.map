{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/juan.lizarraga/Documents/projects/nextjs/NextJS---CRUD/src/lib/prisma.js"],"sourcesContent":["import { PrismaClient } from \"@prisma/client\"\r\n\r\nexport const prisma = new PrismaClient()"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,SAAS,IAAI,6HAAA,CAAA,eAAY"}},
    {"offset": {"line": 61, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 67, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/juan.lizarraga/Documents/projects/nextjs/NextJS---CRUD/src/types/index.js"],"sourcesContent":["import {z} from 'zod'\r\n\r\nexport const TaskSchema = z.object({\r\n    \"title\": z.string(),\r\n    \"description\": z.string()\r\n})"],"names":[],"mappings":";;;AAAA;;AAEO,MAAM,aAAa,sIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/B,SAAS,sIAAA,CAAA,IAAC,CAAC,MAAM;IACjB,eAAe,sIAAA,CAAA,IAAC,CAAC,MAAM;AAC3B"}},
    {"offset": {"line": 76, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 82, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/juan.lizarraga/Documents/projects/nextjs/NextJS---CRUD/src/middlewares/validateRequest.js"],"sourcesContent":["import { TaskSchema } from \"@/types\";\r\n\r\n\r\nexport class validateRequest{\r\n    static async validateTaskRequest(request){\r\n        try {\r\n            const body = await request.json().catch(() => null);\r\n            if (!body) {\r\n            return NextResponse.json(\r\n                { error: \"Cuerpo de la solicitud inv√°lido\" },\r\n                { status: 400 }\r\n            )\r\n            }\r\n            const response = await TaskSchema.safeParse(body)\r\n            if(response.success){\r\n                return  null\r\n            }\r\n        } catch (error) {\r\n            return NextResponse.json(\r\n                { error: \"Datos ingresados no validos\" },\r\n                { status: 400 }\r\n              )\r\n        }\r\n    }\r\n}"],"names":[],"mappings":";;;AAAA;;AAGO,MAAM;IACT,aAAa,oBAAoB,OAAO,EAAC;QACrC,IAAI;YACA,MAAM,OAAO,MAAM,QAAQ,IAAI,GAAG,KAAK,CAAC,IAAM;YAC9C,IAAI,CAAC,MAAM;gBACX,OAAO,aAAa,IAAI,CACpB;oBAAE,OAAO;gBAAkC,GAC3C;oBAAE,QAAQ;gBAAI;YAElB;YACA,MAAM,WAAW,MAAM,uHAAA,CAAA,aAAU,CAAC,SAAS,CAAC;YAC5C,IAAG,SAAS,OAAO,EAAC;gBAChB,OAAQ;YACZ;QACJ,EAAE,OAAO,OAAO;YACZ,OAAO,aAAa,IAAI,CACpB;gBAAE,OAAO;YAA8B,GACvC;gBAAE,QAAQ;YAAI;QAEtB;IACJ;AACJ"}},
    {"offset": {"line": 111, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 125, "column": 0}, "map": {"version":3,"sources":["file://C%3A/Users/juan.lizarraga/Documents/projects/nextjs/NextJS---CRUD/src/app/api/task/route.js"],"sourcesContent":["import {prisma} from '@/lib/prisma'\r\nimport { validateRequest } from '@/middlewares/validateRequest'\r\nimport { NextResponse } from \"next/server\"\r\n\r\nexport async function GET(){\r\n    try {\r\n        const task = await prisma.task.findMany()\r\n        return NextResponse.json(task)\r\n    } catch (error) {\r\n        console.log(error.message)\r\n    }\r\n}\r\nexport async function POST(request){\r\n    try {\r\n        const {title, description} = await request.json()\r\n        const newTask = await prisma.task.create({\r\n            data: {\r\n                title,\r\n                description\r\n            }\r\n        })\r\n        return NextResponse.json(newTask)\r\n    } catch (error) {\r\n        return NextResponse.json({error: error.message},{status: 500})\r\n    }\r\n}"],"names":[],"mappings":";;;;AAAA;AACA;AACA;;;;AAEO,eAAe;IAClB,IAAI;QACA,MAAM,OAAO,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,QAAQ;QACvC,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,QAAQ,GAAG,CAAC,MAAM,OAAO;IAC7B;AACJ;AACO,eAAe,KAAK,OAAO;IAC9B,IAAI;QACA,MAAM,EAAC,KAAK,EAAE,WAAW,EAAC,GAAG,MAAM,QAAQ,IAAI;QAC/C,MAAM,UAAU,MAAM,sHAAA,CAAA,SAAM,CAAC,IAAI,CAAC,MAAM,CAAC;YACrC,MAAM;gBACF;gBACA;YACJ;QACJ;QACA,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IAC7B,EAAE,OAAO,OAAO;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;YAAC,OAAO,MAAM,OAAO;QAAA,GAAE;YAAC,QAAQ;QAAG;IAChE;AACJ"}},
    {"offset": {"line": 161, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}